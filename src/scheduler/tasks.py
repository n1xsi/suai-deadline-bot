import asyncio
from datetime import datetime

from aiogram import Bot
from loguru import logger

from src.database.queries import (
    get_all_users, get_user_by_telegram_id, get_user_deadlines_from_db, update_user_deadlines
)
from src.parser.scraper import parse_lk_data
from src.utils.crypto import decrypt_data


async def update_user_deadlines_and_notify(bot: Bot, user_id: int, force_notify: bool = False):
    """
    –ó–∞–¥–∞—á–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–µ–¥–ª–∞–π–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    :param bot: –ë–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param force_notify: –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, –±—É–¥–µ—Ç –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –¥–µ–¥–ª–∞–π–Ω—ã –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å
    """
    logger.info(f"–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–µ–¥–ª–∞–π–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}...")

    user = await get_user_by_telegram_id(user_id)
    if not user:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —É—á—ë—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if not user.encrypted_login_lk or not user.encrypted_password_lk:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id} (–Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)")
        return

    # –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    login = decrypt_data(user.encrypted_login_lk)
    password = decrypt_data(user.encrypted_password_lk)

    # –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞
    loop = asyncio.get_event_loop()
    parsed_data = await loop.run_in_executor(None, parse_lk_data, login, password)
    if parsed_data:
        deadlines_from_parser, _, _ = parsed_data
    else:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id} (–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞)")
        return

    newly_added = await update_user_deadlines(user.telegram_id, deadlines_from_parser)

    if newly_added:
        # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø—É—Å—Ç–æ–π, –∑–Ω–∞—á–∏—Ç –ø–æ—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ –¥–µ–¥–ª–∞–π–Ω—ã
        logger.success(f"–ù–∞–π–¥–µ–Ω–æ {len(newly_added)} –Ω–æ–≤—ã—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}")

        new_deadlines_text = "‚ú® <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ –¥–µ–¥–ª–∞–π–Ω—ã!</b>\n\n"
        for d in newly_added:
            new_deadlines_text += (
                f"üìö <b>{d['course_name']}</b>\n"
                f"üìù {d['task_name']}\n"
                f"üóìÔ∏è –°—Ä–æ–∫ —Å–¥–∞—á–∏: {d['due_date'].strftime('%d.%m.%Y')}\n\n"
            )

        try:
            await bot.send_message(
                chat_id=user.telegram_id,
                text=new_deadlines_text,
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤—ã—Ö –¥–µ–¥–ª–∞–π–Ω–∞—Ö {user.telegram_id}. –û—à–∏–±–∫–∞: {e}")
    else:
        logger.info(f"–ù–æ–≤—ã—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        if force_notify:
            await bot.send_message(
                chat_id=user.telegram_id,
                text="‚úÖ –ù–æ–≤—ã—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤—Å—ë –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É!",
                parse_mode="HTML"
            )
    

async def update_all_deadlines(bot: Bot):
    """
    –ó–∞–¥–∞—á–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–µ–¥–ª–∞–π–Ω–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö.
    """
    logger.info("–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–µ–¥–ª–∞–π–Ω–æ–≤ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    users = await get_all_users()
    for user in users:
        await update_user_deadlines_and_notify(bot, user.telegram_id)
        await asyncio.sleep(5)
    
    logger.success(f"–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–µ–¥–ª–∞–π–Ω–æ–≤ –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


async def send_deadline_notifications(bot: Bot):
    """
    –ó–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö —Å —É—á—ë—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    logger.info("–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö")
    current_hour = datetime.now().hour

    # –ü–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ —Ç–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫—Ç–æ —Ö–æ—á–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    users_to_notify = await get_all_users(only_with_notifications=True)

    for user in users_to_notify:
        notification_sent_this_run = False
        user_deadlines = await get_user_deadlines_from_db(user.telegram_id)
        if not user_deadlines:
            continue

        # –õ–æ–≥–∏–∫–∞ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if user.notification_days and current_hour == 9:  # –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –≤ 9:00
            notification_days_set = set(map(int, user.notification_days.split(',')))
            today = datetime.now().date()
            for deadline in user_deadlines:
                days_left = (deadline.due_date.date() - today).days
                if days_left in notification_days_set:
                    text = (
                        f"üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–µ–¥–ª–∞–π–Ω–µ!</b>\n\n"
                        f"üìö <b>–ü—Ä–µ–¥–º–µ—Ç:</b> {deadline.course_name}\n"
                        f"üìù <b>–ó–∞–¥–∞–Ω–∏–µ:</b> {deadline.task_name}\n\n"
                        f"üóìÔ∏è <u>–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π</u>: <b>{days_left}</b>"
                    )
                    try:
                        await bot.send_message(chat_id=user.telegram_id, text=text, parse_mode="HTML")
                        logger.success(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ï–ñ–ï–î–ù–ï–í–ù–û–ï —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}.")
                        notification_sent_this_run = True
                        break  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–≥–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ —Ä–∞–∑
                    except Exception as e:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {user.telegram_id}. –û—à–∏–±–∫–∞: {e}")

        # –õ–æ–≥–∏–∫–∞ –¥–ª—è —á–∞—Å—Ç—ã—Ö (—á–∞—Å–æ–≤—ã—Ö) —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        interval = user.notification_interval_hours
        if interval > 0 and current_hour % interval == 0 and not notification_sent_this_run:
            deadlines_text = "‚è∞ <b>–ß–∞—Å–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!</b>\n\n–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–µ–¥–ª–∞–π–Ω—ã:\n\n"
            for d in user_deadlines:
                deadlines_text += f"‚ñ™Ô∏è {d.course_name}: {d.task_name} (–¥–æ {d.due_date.strftime('%d.%m')})\n"
            try:
                await bot.send_message(chat_id=user.telegram_id, text=deadlines_text, parse_mode="HTML")
                logger.success(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ß–ê–°–¢–û–ï —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {user.telegram_id}. –û—à–∏–±–∫–∞: {e}")

        await asyncio.sleep(1)
    logger.success("–ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
